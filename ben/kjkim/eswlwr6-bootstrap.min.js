/*
 * Copyright 2020 salesforce.com, inc.
 * All Rights Reserved
 * Company Confidential
 *
 * TO MINIFY: Use Google Closure Compiler:
 *		google-closure-compiler --js=bootstrap.js --js_output_file=bootstrap.min.js --rewrite_polyfills=false --language_out ECMASCRIPT_2015 --warning_level=QUIET
 *
 *		Install google-closure-compiler by running:
 *			npm install -g google-closure-compiler
 */
(() => {
	/**
	 * GSLB URL to serve the static files from.
	 */
	const GSLB_BASE_URL = "https://service.force.com";

	/**
	 * Conversation button class constants.
	 */
	const CONVERSATION_BUTTON_CLASS = "embeddedMessagingConversationButton";
	const CONVERSATION_BUTTON_WRAPPER_CLASS = CONVERSATION_BUTTON_CLASS + "Wrapper";
	const CONVERSATION_BUTTON_LOADED_CLASS = CONVERSATION_BUTTON_CLASS + "Loaded";
	const CONVERSATION_BUTTON_LOADING_CLASS = CONVERSATION_BUTTON_CLASS + "Loading";
	const CONVERSATION_BUTTON_BOTTOM_TAB_BAR_CLASS = "embeddedMessagingBottomTabBar";

	/**
	 * Parent page elements class constants.
	 */
	const TOP_CONTAINER_NAME = "embedded-messaging";
	const BACKGROUND_MODAL_ID = "embeddedMessagingModalOverlay";
	const PREVENT_SCROLLING_CLASS = "embeddedMessagingPreventScrolling";
	const IFRAME_NAME = "embeddedMessagingFrame";
	const IFRAME_DEFAULT_TITLE = "Chat with an Agent";
	const IFRAME_BOTTOM_TAB_BAR_MAXIMIZED_CLASS = IFRAME_NAME + "MaximizedBottomTabBar";
	const IFRAME_BOTTOM_TAB_BAR_MINIMIZED_CLASS = IFRAME_NAME + "MinimizedBottomTabBar";
	const FILE_PREVIEW_IFRAME_NAME = "embeddedMessagingFilePreviewFrame";
	const FILE_PREVIEW_IFRAME_DEFAULT_TITLE = "Enlarged image preview";

	/**
	 * Icon constants.
	 */
	const DEFAULT_ICONS = {};
	const EMBEDDED_MESSAGING_ICON = "embeddedMessagingIcon";
	const EMBEDDED_MESSAGING_ICON_CHAT = EMBEDDED_MESSAGING_ICON + "Chat";
	const EMBEDDED_MESSAGING_ICON_CONTAINER = EMBEDDED_MESSAGING_ICON + "Container";
	const EMBEDDED_MESSAGING_ICON_LOADING = EMBEDDED_MESSAGING_ICON + "Loading";

	/**
	 * Loading constants.
	 */
	const EMBEDDED_MESSAGING_LOADING = "embeddedMessagingLoading";
	const EMBEDDED_MESSAGING_LOADING_SPINNER = EMBEDDED_MESSAGING_LOADING + "Spinner";
	const EMBEDDED_MESSAGING_LOADING_CIRCLE = EMBEDDED_MESSAGING_LOADING + "Circle";

	// TODO: confirm these as they will be APIs.
	const APP_LOADED_EVENT_NAME = "ESW_APP_LOADED";
	const APP_MINIMIZE_EVENT_NAME = "ESW_APP_MINIMIZE";
	const APP_MAXIMIZE_EVENT_NAME = "ESW_APP_MAXIMIZE";
	const EMBEDDED_MESSAGING_SET_JWT_EVENT_NAME = "ESW_SET_JWT_EVENT";
	const EMBEDDED_MESSAGING_CLEAN_UP_JWT_EVENT_NAME = "ESW_CLEAN_UP_JWT_EVENT";
	const APP_REQUEST_CONFIG_SERVICE_DATA_EVENT_NAME = "ESW_APP_SEND_CONFIG_SERVICE_DATA";
	const APP_RECEIVE_CONFIG_SERVICE_DATA_EVENT_NAME = "ESW_APP_RECEIVE_CONFIG_SERVICE_DATA";
	const APP_RESET_INITIAL_STATE_EVENT_NAME = "ESW_APP_RESET_INITIAL_STATE";
	const EMBEDDED_MESSAGING_DOWNLOAD_FILE = "ESW_DOWNLOAD_FILE";
	const EMBEDDED_MESSAGING_UPDATE_WEBSTORAGE_FAILEDMESSAGES_EVENT_NAME = "ESW_SET_WEBSTORAGE_FAILEDMESSAGES_EVENT";
	const EMBEDDED_MESSAGING_CLEAN_UP_WEBSTORAGE_FAILEDMESSAGES_EVENT_NAME = "ESW_CLEAN_UP_WEBSTORAGE_FAILEDMESSAGES_EVENT";
	const EMBEDDED_MESSAGING_MAXIMIZE_RESIZING_COMPLETED_EVENT_NAME = "ESW_APP_MAXIMIZATION_RESIZING_COMPLETED";
	const EMBEDDED_MESSAGING_MINIMIZE_RESIZING_COMPLETED_EVENT_NAME = "ESW_APP_MINIMIZATION_RESIZING_COMPLETED";
	const EMBEDDED_MESSAGING_UPDATE_TITLE_NOTIFICATION = "ESW_APP_UPDATE_TITLE_NOTIFICATION";
	const EMBEDDED_MESSAGING_SHOW_FILE_PREVIEW_FRAME_EVENT_NAME = "ESW_APP_SHOW_FILE_PREVIEW_FRAME";
	const EMBEDDED_MESSAGING_HIDE_FILE_PREVIEW_FRAME_EVENT_NAME = "ESW_APP_HIDE_FILE_PREVIEW_FRAME";

	const SALESFORCE_DOMAINS = [
		// Used by dev, blitz, and prod instances
		".salesforce.com",

		// Used by VPODs
		".force.com",

		// Used by autobuild VMs
		".sfdc.net",

		// Used by local environments and Enhanced Domains CDN
		".site.com",
		
		// Enhanced domains on sandbox
		".salesforce-sites.com"
	];

	/**
	 * Attributes required to construct SCRT 2.0 Config Service URL.
	 */
	const IN_APP_CONFIG_API_PREFIX = "embeddedservice";
	const IN_APP_CONFIG_API_VERSION = "v1";

	/**
 	 * Local storage key to store failed outbound message entries.
 	 * @type {string}
 	 */
	const FAILED_OUTBOUND_MESSAGE_ENTRIES = "ESW_FAILED_MESSAGES";

	/**
	 * Default document title of the page.
	 * @type {string}
	 */
	const DEFAULT_DOCUMENT_TITLE = document.title;

	/**
	 * Interval of title notification blinking.
	 * @type {number}
	 */
	const DOCUMENT_TITLE_BLINK_FREQUENCY_MS = 1000;

	/**
	 * Store the interval for the notification blinking.
	 * @type {number}
	 */
	let documentTitleBlinkIntervalID;

	/**
	 * Merge a key-value mapping into the setting object, such that the provided
	 * map takes priority.
	 *
	 * @param {object} additionalSettings - A key-value mapping.
	 */
	function mergeSettings(additionalSettings) {
		if(additionalSettings && typeof additionalSettings === "object") {
			Object.keys(additionalSettings).forEach((key) => {
				if(embeddedservice_bootstrap.settings[key] === undefined) {
					embeddedservice_bootstrap.settings[key] = additionalSettings[key];
				}
			});
		}
	}

	/**
	 * Checks if the baseObject's functionName method is still native code or if it has been modified.
	 *
	 * @param {Object} baseObject - Base object to check for modification of native code.
	 * @param {string} functionName - Function name to check.
	 * @return {boolean} Is the baseObject's functionName method still native code?
	 */
	function isNativeFunction(baseObject, functionName) {
		return Function.prototype.toString.call(baseObject[functionName]).match(/\[native code\]/);
	}

	/**
	 * Output to the console using a specified method.
	 *
	 * @param {string} method - The console method to use.
	 * @param {Array.<*>} args - Objects to be displayed comma-delimited.
	 * @param {boolean} alwaysOutput - Always log to console regardless of devMode setting.
	 */
	function outputToConsole(method, args, alwaysOutput) {
		if((alwaysOutput || embeddedservice_bootstrap.settings.devMode) && console && console[method]) { // eslint-disable-line no-console
			console[method]("[EmbeddedServiceBootstrap] " + (Array.isArray(args) ? args.join(", ") : args)); // eslint-disable-line no-console
		}
	}

	/**
	 * Log a message to the console.
	 *
	 * @param {...object} messages - Objects to be displayed comma-delimited.
	 */
	function log() {
		outputToConsole("log", [].slice.apply(arguments));
	}

	/**
	 * Log a warning.
	 *
	 * @param {string} message - The warning message to print.
	 * @param {boolean} alwaysOutput - Always log to console regardless of devMode setting.
	 */
	function warning(message, alwaysOutput) {
		if(message) {
			outputToConsole("warn", "Warning: " + message, alwaysOutput);
		} else {
			outputToConsole("warn", "EmbeddedServiceBootstrap sent an anonymous warning.", alwaysOutput);
		}
	}

	/**
	 * Log an error.
	 *
	 * @param {string} message - The error message to print.
	 * @param {boolean} alwaysOutput - Always log to console regardless of devMode setting.
	 */
	function error(message, alwaysOutput) {
		if(message) {
			outputToConsole("error", message, alwaysOutput);
		} else {
			outputToConsole("error", "EmbeddedServiceBootstrap responded with an unspecified error.", alwaysOutput);
		}
	}

	/**
	 * Check if this file was loaded into a Salesforce Site.
	 *
	 * @return {boolean} True if this page is a Salesforce Site.
	 */
	function isSiteContext() {
		return window.$A && typeof window.$A.get === "function" && window.$A.get("$Site");
	}

	/**
	 * Determines if a message origin url has a Salesforce domain. Used for filtering non-Salesforce messages.
	 *
	 * @param {string} messageOriginUrl - String containing the origin url. This should end with the domain (strip off the port before passing to this function).
	 * @return {boolean} Did message come from page hosted on Salesforce domain?
	 */
	EmbeddedServiceBootstrap.prototype.isMessageFromSalesforceDomain = function isMessageFromSalesforceDomain(messageOriginUrl) {
		var endsWith;
		var messageOrigin = messageOriginUrl.split(":")[1].replace("//", "");

		/**
		 * 1st check - if on Experience Cloud platform, and endpoint is same as hosting site, message origin will be from same domain as document.
		 */
		if(isSiteContext() && messageOrigin === document.domain) {
			return true;
		}

		/**
		 * "Polyfill" for String.prototype.endsWith since IE doesn't support it.
		 *
		 * @param {string} first - Does the first string...
		 * @param {string} second - ...end with the second string?
		 * @return {boolean} Does it?
		 */
		endsWith = function(first, second) {
			return first.indexOf(second, first.length - second.length) !== -1;
		};

		/**
		 * 2nd check - message origin is an actual salesforce domain
		 */
		return SALESFORCE_DOMAINS.some(function(salesforceDomain) {
			return endsWith(messageOrigin, salesforceDomain);
		});
	};

	/**
	 * Some users may have stricter browser security settings.
	 * Determine what web storage APIs are available. Do nothing on error.
	 */
	function detectWebStorageAvailability() {
		try {
			window.localStorage;
		} catch(e) {
			warning("localStorage is not available. User chat sessions continue only in a single-page view and not across multiple pages.");
			embeddedservice_bootstrap.isLocalStorageAvailable = false;
		}
		try {
			window.sessionStorage;
		} catch(e) {
			warning("sessionStorage is not available. User chat sessions end after a web page refresh or across browser tabs and windows.");
			embeddedservice_bootstrap.isSessionStorageAvailable = false;
		}

		// [W-10897270] Limit session continuity in Firefox to a single tab by storing jwt in Session Storage.
		if(isUserFirefox()) {
			embeddedservice_bootstrap.isLocalStorageAvailable = false;
		}
	}

	/**
	 * EmbeddedServiceBootstrap global object which creates and renders an embeddedService.app in an iframe.
	 *
	 * @class
	 * @property {object} settings - A list of settings that can be set here or within init.
	 */
	function EmbeddedServiceBootstrap() {
		this.settings = {
			devMode: false,
			debugMode: false,
			targetElement: document.body
		};

		this.isLocalStorageAvailable = true;
		this.isSessionStorageAvailable = true;

		// Default chat icon data.
		Object.defineProperties(DEFAULT_ICONS, {
			CHAT: {
				value: "M50 0c27.614 0 50 20.52 50 45.833S77.614 91.667 50 91.667c-8.458 0-16.425-1.925-23.409-5.323-13.33 6.973-21.083 9.839-23.258 8.595-2.064-1.18.114-8.436 6.534-21.767C3.667 65.54 0 56.08 0 45.833 0 20.52 22.386 0 50 0zm4.583 61.667H22.917a2.917 2.917 0 000 5.833h31.666a2.917 2.917 0 000-5.833zm12.5-15.834H22.917a2.917 2.917 0 000 5.834h44.166a2.917 2.917 0 000-5.834zM79.583 30H22.917a2.917 2.917 0 000 5.833h56.666a2.917 2.917 0 000-5.833z"
			}
		});

		this.brandingData = [];
	}

	/**
	 * Determine if a string is a valid Salesforce entity ID.
	 *
	 * @param {string} entityId - The value that should be checked.
	 * @returns {boolean} Is this a valid entity Id?
	 */
	EmbeddedServiceBootstrap.prototype.isValidEntityId = function isValidEntityId(entityId) {
		return typeof entityId === "string" && (entityId.length === 18 || entityId.length === 15);
	};

	/**
	 * Extract the entity key prefix from a valid entity ID.
	 *
	 * @param {string} entityId = The string from which to extract the entity ID.
	 * @returns {string} The key prefix, if this ID is valid.
	 */
	EmbeddedServiceBootstrap.prototype.getKeyPrefix = function getKeyPrefix(entityId) {
		if(embeddedservice_bootstrap.isValidEntityId(entityId)) return entityId.substr(0, 3);

		return undefined;
	};

	/**
	 * Determines if a string is a valid Salesforce organization ID.
	 *
	 * @param {string} entityId - An entity ID.
	 * @returns {boolean} Is the string an organization ID?
	 */
	EmbeddedServiceBootstrap.prototype.isOrganizationId = function isOrganizationId(entityId) {
		return embeddedservice_bootstrap.getKeyPrefix(entityId) === "00D";
	};

	/******************************************************
						Icon rendering
		This is copied from embeddedService:iconHelper.js.
	******************************************************/
	/**
	 * You can add icons by defining either their SVG path or an array of objects representing the SVG structure.
	 *
	 * Your icon should have a `viewBox` of `0 0 100 100`. If it doesn't, you can scale it using this tool:
	 * [https://jakearchibald.github.io/svgomg/](https://jakearchibald.github.io/svgomg/).
	 * See [https://salesforce.quip.com/1refAeGnpAeW](https://salesforce.quip.com/1refAeGnpAeW) for instructions.
	 *
	 * If you add an icon, make sure you update the icon repository so that we can make sure we don't lose any:
	 * [https://git.soma.salesforce.com/embedded-service-for-web/embedded-service-icons/tree/master/InAppMessaging](https://git.soma.salesforce.com/embedded-service-for-web/embedded-service-icons/tree/master/InAppMessaging)
	 *
	 * The parent repository has a `scale.svg` file which you can put your path into and upload to the scaling tool. Make sure you change
	 * the `transform: scale` amount to be the value of `startWidth/endWidth`.
	 */
	/**
	 * Create an SVG element of a given type, using attributes provided in a map.
	 * If an attribute "children" is provided, createSVGElement will be run using the objects in that array.
	 *
	 * @param {SVGElement} parent - The parent element for this SVG element.
	 * @param {String} elementType - The type of element to create.
	 * @param {Object} elementDefinition - Attributes to attach to the element.
	 */
	function createSVGElement(parent, elementType, elementDefinition) {
		const element = document.createElementNS("http://www.w3.org/2000/svg", elementType);

		Object.getOwnPropertyNames(elementDefinition).forEach((attribute) => {
			if(attribute === "children") {
				elementDefinition.children.forEach((childElementDefinition) => {
					createSVGElement(element, childElementDefinition.type, childElementDefinition);
				});
			} else {
				element.setAttribute(attribute, elementDefinition[attribute]);
			}
		});

		// TextNodes added to address accessibility bug in Safari 10.x (https://bugs.webkit.org/show_bug.cgi?id=162866)
		parent.appendChild(document.createTextNode("\n"));
		parent.appendChild(element);
		parent.appendChild(document.createTextNode("\n"));
	}

	/**
	 * Renders the SVG element using the icon data (i.e. path definition).
	 *
	 * @param {String} iconData - Reference to the icon data.
	 * @return {SVGElement} - The reference for this SVG element.
	 */
	function renderSVG(iconData) {
		const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");

		if(iconData) {
			svg.setAttribute("focusable", "false");
			svg.setAttribute("aria-hidden", "true");
			svg.setAttribute("viewBox", "0 0 100 100");

			if(Array.isArray(iconData)) {
				iconData.forEach((pathDefinition) => {
					createSVGElement(svg, pathDefinition.type, pathDefinition);
				});
			} else {
				createSVGElement(svg, "path", { d: iconData });
			}

			return svg;
		} else {
			error("Invalid icon data.");
		}

		return undefined;
	}

	/**
	 * Check for modified document/window native JS methods and output a warning for each overriden method.
	 * These methods are used in EmbeddedServiceBootstrap and also in Aura.
	 */
	function checkForNativeFunctionOverrides() {
		let documentFunctionsToCheck = [
			"addEventListener",
			"createAttribute",
			"createComment",
			"createDocumentFragment",
			// SFDC overrides createElement so we'll skip this one.
			// "createElement",
			"createElementNS",
			"createTextNode",
			"createRange",
			"getElementById",
			"getElementsByTagName",
			"getElementsByClassName",
			"querySelector",
			"querySelectorAll",
			"removeEventListener"
		];
		let windowFunctionsToCheck = [
			"addEventListener",
			"clearTimeout",
			"dispatchEvent",
			"open",
			"removeEventListener",
			"requestAnimationFrame",
			"setInterval",
			"setTimeout"
		];
		let objectsToCheck = [{
			name: "document",
			object: document,
			functions: documentFunctionsToCheck
		}, {
			name: "window",
			object: window,
			functions: windowFunctionsToCheck
		}];

		// For each object type (doc/win), we want to check their expected native functions.
		objectsToCheck.forEach((objectToCheck) => {
			objectToCheck.functions.forEach((nativeFunction) => {
				if(nativeFunction in objectToCheck.object && !isNativeFunction(objectToCheck.object, nativeFunction)) {
					warning(
						"EmbeddedService Messaging Bootstrap may not function correctly with this native JS function modified: " + objectToCheck.name + "." + nativeFunction,
						true
					);
				}
			});
		});
	}

	/**
	 * If the iframe is responsible for getting a new JWT, it will send a post message here to notify the parent of the new JWT. Store this new JWT in web storage for session continuity.
	 * @param {String} jwt - JWT to store in web storage.
	 */
	function storeJWTInWebStorage(jwt) {
		let storage;

		if(typeof jwt !== "string") {
			error(`Expected to receive string, instead received: ${jwt}.`);
		}

		if(embeddedservice_bootstrap.isLocalStorageAvailable) {
			storage = localStorage;
		} else if(embeddedservice_bootstrap.isSessionStorageAvailable) {
			storage = sessionStorage;
		} else {
			// Do nothing if storage is not available.
			return;
		}

		storage.setItem(embeddedservice_bootstrap.settings.orgId, jwt);
	}

	/**
	 * Remove the JWT from web storage.
	 */
	function cleanUpJWT() {
		let storage;

		if(embeddedservice_bootstrap.isLocalStorageAvailable) {
			storage = localStorage;
		} else if(embeddedservice_bootstrap.isSessionStorageAvailable) {
			storage = sessionStorage;
		} else {
			// Do nothing if storage is not available.
			return;
		}

		storage.removeItem(embeddedservice_bootstrap.settings.orgId);
	}

	/**
	 * When the iframe updates its web storage for Failed Conversation Messages, it will send a post message here with Failed Conversation Messages object
	 * to notify the parent to store the same in web storage for session continuity.
	 * @param {Object} failedMessages - Failed end-user conversation messages.
	 */
	function storeFailedMessagesInWebStorage(failedMessages) {
		let storage;

		if (typeof failedMessages !== "object") {
			error(`Expected to receive object, instead received: ${failedMessages}.`);
			return;
		}
		if(embeddedservice_bootstrap.isSessionStorageAvailable) {
			storage = sessionStorage;
		} else {
			// Do nothing if storage is not available.
			return;
		}

		storage.setItem(FAILED_OUTBOUND_MESSAGE_ENTRIES, JSON.stringify(failedMessages));
	}

	/**
	 * Clears the failed messages from parent frame's web storage when the iframe notifies the parent.
	 */
	function cleanUpFailedMessagesInWebStorage() {
		if(embeddedservice_bootstrap.isSessionStorageAvailable && sessionStorage.getItem(FAILED_OUTBOUND_MESSAGE_ENTRIES)) {
			sessionStorage.removeItem(FAILED_OUTBOUND_MESSAGE_ENTRIES);
		}
	}

	/**
	 * Event handlers for resizing the iframe dynamically, based on size/state of the aura application.
	 */
	function addEventHandlers() {
		window.addEventListener("message", (e) => {
			if(e && e.data && e.origin) {
				if(embeddedservice_bootstrap.filePreviewFrame.contentWindow === e.source) {
					// Handle events from File Preview Iframe window.
					switch(e.data.method) {
						case EMBEDDED_MESSAGING_SHOW_FILE_PREVIEW_FRAME_EVENT_NAME:
								setFilePreviewFrameVisibility(true);
								break;
						case EMBEDDED_MESSAGING_HIDE_FILE_PREVIEW_FRAME_EVENT_NAME:
								setFilePreviewFrameVisibility(false);
								break;
						default:
							warning("Unrecognized event name: " + e.data.method);
							break;
					}
				} else if(e.origin === "null" ||
						(getSiteUrl().indexOf(e.origin) === 0
						&& embeddedservice_bootstrap.isMessageFromSalesforceDomain(e.origin)
						&& getEmbeddedMessagingFrame().contentWindow === e.source)) {
						let frame = getEmbeddedMessagingFrame();

						// TODO: Confirm event names with product.
						switch(e.data.method) {
							case APP_REQUEST_CONFIG_SERVICE_DATA_EVENT_NAME:
								/**
							 	 * Send Config Settings to container along with Labels and Jwt.
							 	 * Labels, Jwt and Failed Conversation Messages are not stored on Config Settings object.
							 	 */
								sendPostMessageToIframeWindow(APP_RECEIVE_CONFIG_SERVICE_DATA_EVENT_NAME,
									Object.assign({}, embeddedservice_bootstrap.settings.embeddedServiceConfig, {
										jwt: getJwtIfExists(),
										failedMessages: getFailedMessagesIfExists(),
										...(embeddedservice_bootstrap.settings.standardLabels && {standardLabels: embeddedservice_bootstrap.settings.standardLabels}),
										...(embeddedservice_bootstrap.settings.embeddedServiceConfig.customLabels && {customLabels: embeddedservice_bootstrap.settings.embeddedServiceConfig.customLabels})
									}));
								break;
							case APP_LOADED_EVENT_NAME:
								// TODO W-10165756 - Remove handling for the event when we no longer support the aura app.
								if(embeddedservice_bootstrap.settings.isAuraSite) {
									handleAfterAppLoad();
								}
								break;
							case APP_MINIMIZE_EVENT_NAME:
								embeddedservice_bootstrap.minimizeIframe(frame, e.data.data);
								break;
							case APP_MAXIMIZE_EVENT_NAME:
								embeddedservice_bootstrap.maximizeIframe(frame);
								break;
							case APP_RESET_INITIAL_STATE_EVENT_NAME:
								handleResetClientToInitialState();
								break;
							case EMBEDDED_MESSAGING_SET_JWT_EVENT_NAME:
								storeJWTInWebStorage(e.data.data);
								break;
							case EMBEDDED_MESSAGING_CLEAN_UP_JWT_EVENT_NAME:
								cleanUpJWT();
								break;
							case EMBEDDED_MESSAGING_DOWNLOAD_FILE:
								downloadFile(e.data.data);
								break;
							case EMBEDDED_MESSAGING_UPDATE_WEBSTORAGE_FAILEDMESSAGES_EVENT_NAME:
								storeFailedMessagesInWebStorage(e.data.data);
								break;
							case EMBEDDED_MESSAGING_CLEAN_UP_WEBSTORAGE_FAILEDMESSAGES_EVENT_NAME:
								cleanUpFailedMessagesInWebStorage();
								break;
							case EMBEDDED_MESSAGING_UPDATE_TITLE_NOTIFICATION:
								updateTitleNotification(e.data.data);
								break;
							default:
								warning("Unrecognized event name: " + e.data.method);
								break;
						}
				} else {
					error("Unexpected message origin: " + e.origin);
				}
			}
		});
	}

	/**
	 * Updates the title notification on new messages received when page is backgrounded 
	 * - If data is defined, then set interval to blink between 2 notifications
	 * - Otherwise, clear the interval and reset to default page title
	 */
	function updateTitleNotification(data) {
		if (data) {
			const messages = JSON.parse(data);

			const firstNotification = messages[0];
			const secondNotification = DEFAULT_DOCUMENT_TITLE;

			// Clear previous interval, if exists
			if (documentTitleBlinkIntervalID) {
				window.clearInterval(documentTitleBlinkIntervalID);
			}

			documentTitleBlinkIntervalID = window.setInterval(() => {
				if (document.title === firstNotification) {
					document.title = secondNotification;
				} else {
					document.title = firstNotification;
				}
			}, DOCUMENT_TITLE_BLINK_FREQUENCY_MS);
		} else {
			window.clearInterval(documentTitleBlinkIntervalID);
			documentTitleBlinkIntervalID = undefined;
			document.title = DEFAULT_DOCUMENT_TITLE;
		}
	}

	/**
	 * Returns a DOM reference to the embedded messaging iframe.
	 *
	 * @returns {object}
	 */
	function getEmbeddedMessagingFrame() {
		return document.getElementById(IFRAME_NAME) || undefined;
	}

	/**
	 * Set file preview iframe visibility (i.e. show/hide) based on the param value.
	 *
	 * @param {boolean} showFilePreviewFrame
	 */
	function setFilePreviewFrameVisibility(showFilePreviewFrame) {
		const embeddedMessagingFrame = getEmbeddedMessagingFrame();

		if(embeddedservice_bootstrap.filePreviewFrame && embeddedMessagingFrame) {
			if(Boolean(showFilePreviewFrame)) {
				embeddedservice_bootstrap.filePreviewFrame.classList.add("show");
				embeddedservice_bootstrap.filePreviewFrame.contentWindow.focus();
				embeddedservice_bootstrap.filePreviewFrame.setAttribute("aria-hidden", "false");
				embeddedMessagingFrame.tabIndex = "-1";
				embeddedMessagingFrame.setAttribute("aria-hidden", "true");
			} else {
				embeddedservice_bootstrap.filePreviewFrame.classList.remove("show");
				embeddedservice_bootstrap.filePreviewFrame.setAttribute("aria-hidden", "true");
				embeddedMessagingFrame.tabIndex = "0";
				embeddedMessagingFrame.setAttribute("aria-hidden", "false");
			}
		}
	}

	// TODO: Get approved text for Button's title from CX.
	/**
	 * Generates an object URL to host the file preview iframe.
	 *
	 * @returns {string}
	 */
	function getGeneratedPageURLForFilePreviewFrame() {
		//TODO: check for debug mode - get minified if not
		const baseURL = getSiteUrl();
		const src1 = baseURL + "/assets/js/filepreview.js";
		const src2 = baseURL + "/assets/styles/filepreview.css";

		const getBlobURL = (code, type) => {
			const blob = new Blob([code], { type });
			return URL.createObjectURL(blob);
		};

		const source = `
		<html>
		  <head>
			<script src=${src1} type="text/javascript"></script>
			<link rel="stylesheet" href=${src2}>
		  </head>
		  <body>
			<div class="fullSizeFilePreviewModal">
			  <img class="fullSizeFilePreviewModalContent" alt=""></img>
			  <button class="fullSizeFilePreviewModalCloseButton" tabindex="0">&times;</button>
			</div>
		  </body>
		</html>`;

		return getBlobURL(source, 'text/html');
	}

	/**
	 * Downloads a file to the local file system, from the URL in event data.
	 * Temporarily creates and attaches an iframe to the parent page's DOM to achieve this. Removes the temporary iframe from the DOM as cleanup, post download.
	 */
	function downloadFile(downloadData) {
		let fileDownloadIframe;

		fileDownloadIframe = document.createElement("iframe");
		fileDownloadIframe.style.display = "none";
		fileDownloadIframe.src = downloadData.attachmentDownloadURL || "";

		// Add iframe to the DOM.
		document.body.appendChild(fileDownloadIframe);
		// Open the file in a new tab if the app requires it to.
		if(downloadData.shouldOpenFileInNewTab) {
			window.open(fileDownloadIframe.src, '_blank', 'noreferrer noopener');
		}
		/**
		 * Add a small delay before executing Javascript execution queue, to avoid page navigation interruption.
		 * https://kb.webtrends.com/articles/Information/NS-BINDING-ABORTED-status-message-in-http-debugger/?l=en_US&fs=RelatedArticle
		 */
		setTimeout(() => {
			// Cleanup - remove iframe from the DOM.
			document.body.removeChild(fileDownloadIframe);
		}, 1000);
	}

	/**
	 * Validate all the attributes on the settings object required for bootstrap initialization and for making a request to InApp Config Service.
	 */
	function validateInitParams() {
		if(typeof embeddedservice_bootstrap.settings.baseCoreURL !== "string" || !embeddedservice_bootstrap.settings.baseCoreURL.length) throw new Error(`Expected a valid Base core URL value to be a string but received: ${embeddedservice_bootstrap.settings.baseCoreURL}.`);
		if(typeof embeddedservice_bootstrap.settings.scrt2URL !== "string" || !embeddedservice_bootstrap.settings.scrt2URL.length) throw new Error(`Expected a valid SCRT 2.0 URL value to be a string but received: ${embeddedservice_bootstrap.settings.scrt2URL}.`);
		if(!embeddedservice_bootstrap.settings.orgId || !embeddedservice_bootstrap.isOrganizationId(embeddedservice_bootstrap.settings.orgId)) throw new Error("Invalid OrganizationId Parameter Value: " + embeddedservice_bootstrap.settings.orgId);
		if(typeof embeddedservice_bootstrap.settings.eswConfigDevName !== "string" || !embeddedservice_bootstrap.settings.eswConfigDevName.length) throw new Error(`Expected a valid ESW Config Dev Name value to be a string but received: ${embeddedservice_bootstrap.settings.eswConfigDevName}.`);
	}

	/**
	 * Validate all the necessary attributes on the settings object after making a request to InApp Config Service.
	 */
	function validateSettings() {
		if(!embeddedservice_bootstrap.settings.embeddedServiceConfig) throw new Error("Embedded Service Config settings not present in configuration response.");
		if(!embeddedservice_bootstrap.settings.embeddedServiceConfig.name) throw new Error("Embedded Service Config developer name not present in configuration response.");
		if(typeof getSiteUrl() !== "string") throw new Error(`Expected Site URL value in configuration response to be a string but received: ${getSiteUrl()}.`);
	}

	/**
	 * Load the bootstrap.css file for this static file.
	 */
	function loadCSS(url) {

		return new Promise((resolve, reject) => {
			let baseURL = getSiteUrl();
			let link = document.createElement("link");

			link.href = baseURL + "/assets/styles/bootstrap" + (embeddedservice_bootstrap.settings.devMode ? "" : ".min") + ".css";
			link.type = "text/css";
			link.rel = "stylesheet";

			link.onerror = reject;
			link.onload = resolve;

			document.getElementsByTagName("head")[0].appendChild(link);
		});
	}

	/**
	 * Load the config settings from SCRT 2.0 stack.
	 */
	function getConfigurationData() {
		return new Promise((resolve, reject) => {
			const xhr = new XMLHttpRequest();
			const configURL = embeddedservice_bootstrap.settings.scrt2URL + "/" + IN_APP_CONFIG_API_PREFIX + "/" + IN_APP_CONFIG_API_VERSION +
				"/embedded-service-config?orgId=" + embeddedservice_bootstrap.settings.orgId + "&esConfigName=" +
				embeddedservice_bootstrap.settings.eswConfigDevName + "&language=" + embeddedservice_bootstrap.settings.language;

			xhr.open("GET", configURL, true);

			xhr.onreadystatechange = (response) => {
				const state = response.target;

				// DONE === The operation is complete, per https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState.
				if(state && state.readyState === state.DONE) {
					if(state.status === 200) {
						const configSettings = JSON.parse(state.responseText);

						resolve(configSettings);
					} else {
						reject(state.status);
					}
				}
			};
			xhr.send();
		});
	}

	/**
	 * Gets the Site URL from In-App Config Service Response.
	 */
	function getSiteUrl() {
		let siteUrl;

		try {
			//siteUrl = embeddedservice_bootstrap.settings.embeddedServiceConfig.siteUrl;
      siteUrl = "https://inapp-es-community-17ca5266dfa.test1.pc-rnd.force.com/ESWeswlwr61658186903091";
		} catch(err) {
			error("Error getting Site URL: " + err);
		}

		return siteUrl;
	}

	/**
	 * Parse the Config Service response to get labels data.
	 * @param {string} sectionName - section name of the label.
	 * @param {string} labelName - name of the label.
	 */
	function getLabel(sectionName, labelName) {
		for(const label of embeddedservice_bootstrap.settings.embeddedServiceConfig.customLabels) {
			if(label.hasOwnProperty(sectionName)) {
				if(label.hasOwnProperty(labelName) && label["labelName"] === labelName) {
					return label["labelValue"] || "";
				}
			}
		}
		for(const label of embeddedservice_bootstrap.settings.standardLabels) {
			if(label.hasOwnProperty(sectionName)) {
				if(label.hasOwnProperty(labelName) && label["labelName"] === labelName) {
					return label["labelValue"] || "";
				}
			}
		}
		return "";
	}

	/**
	 * Parse the Config Service response to get branding data.
	 * @param {Object} configServiceResponse - JSON object as a response from In-App Config Service.
	 */
	function handleBrandingData(configServiceResponse) {
		if (configServiceResponse && configServiceResponse.branding) {
			embeddedservice_bootstrap.brandingData = configServiceResponse.branding;
		} else {
			embeddedservice_bootstrap.brandingData = [];
		}
	}

	/**
	 * Returns a branding token value given a specified token name.
	 * @param tokenName
	 * @return {String}
	 */
	function getTokenValueFromBrandingConfig(tokenName) {
		for (const brandingToken of embeddedservice_bootstrap.brandingData) {
			if (brandingToken.n && brandingToken.n === tokenName) {
				return brandingToken.v;
			}
		}
	}

	/**
	 * Returns the custom header color branding token value for button background color.
	 * @return {String}
	 */
	function getButtonColorFromBrandingConfig() {
		return getTokenValueFromBrandingConfig("headerColor");
	}

	/**
	 * Returns the custom secondary color branding token value for focus borders.
	 * @return {String}
	 */
	function getButtonFocusBorderColorFromBrandingConfig() {
		return getTokenValueFromBrandingConfig("secondaryColor");
	}

	/**
	 * Set loading status for the button after clicking on it. This is to show the loading status of creating an iframe which would load an aura application.
	 */
	function setLoadingStatusForButton() {
		let button = document.getElementById(CONVERSATION_BUTTON_CLASS);
		let iconContainer = document.getElementById(EMBEDDED_MESSAGING_ICON_CONTAINER);
		let chatIcon = document.getElementById(EMBEDDED_MESSAGING_ICON_CHAT);
		let loadingSpinner = document.createElement("div");
		let circle;
		let i = 1;

		if(button) {
			// Hide the default chat icon on the button.
			chatIcon.style.display = "none";

			// [Animations] Build loading spinner.
			loadingSpinner.setAttribute("class", EMBEDDED_MESSAGING_LOADING_SPINNER);
			loadingSpinner.setAttribute("id", EMBEDDED_MESSAGING_LOADING_SPINNER);
			for(; i < 13; i++) {
				circle = document.createElement("div");
				circle.setAttribute("class", EMBEDDED_MESSAGING_LOADING_CIRCLE + i + " " + EMBEDDED_MESSAGING_LOADING_CIRCLE);
				loadingSpinner.appendChild(circle);
			}

			loadingSpinner.classList.add(EMBEDDED_MESSAGING_ICON_LOADING);

			// Set loading state for the button.
			button.classList.add(CONVERSATION_BUTTON_LOADING_CLASS);
			// Load the animations for button.
			iconContainer.insertBefore(loadingSpinner, chatIcon);
			button.disabled = true;
		}
	}

	/**
	 * Check if we are on a Desktop (non mobile) based on information in the user agent.
	 * Browsers on tablets behave the same as mobile devices.
	 * @returns {boolean} - True if Desktop, false if Mobile client.
	 */
	function isDesktop() {
		return navigator.userAgent.indexOf("Mobi") === -1;
	}

	/**
	 * Determines whether the user is on an iOS 15+ Safari browser.
	 *
	 * This is what navigator.userAgent returns for iOS Safari:
	 * 1) Mozilla/5.0 (iPhone; CPU iPhone OS 14_0_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.1
	 * 2) Mozilla/5.0 (iPad; CPU OS 13_0 like Mac OS X) AppleWebKit / 605.1.15 (KHTML, like Gecko) Mobile / 15E148
	 *
	 * @return {boolean} Is the user agent on iOS 15+ Safari?
	 */
	function isUseriOS15plusSafari() {
		const iOS = Boolean(navigator.userAgent.match(/iP(hone|ad|od)/i));
		const versionMatchArray = navigator.userAgent.match(/(?!=OS)(([0-9]){2})/i);
		const version = versionMatchArray && versionMatchArray.length > 0 ? Number(versionMatchArray[0]) : -1;
		const safari = Boolean(navigator.userAgent.match(/WebKit/i)) &&
			!Boolean(navigator.userAgent.match(/CriOS/i));
		return iOS && safari && version >= 15;
	}

	/**
	 * Determines whether the user is on Firefox browser.
	 *
	 * @returns {boolean} True if the user is on Firefox browser and False otherwise
	 */
	function isUserFirefox() {
		return navigator.userAgent && navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
	}

	/**
	 * Send a post message to the iframe window.
	 * @param {String} method - Name of method.
	 * @param {Object} data - Data to send with message. Only included in post message if data is defined.
	 */
	function sendPostMessageToIframeWindow(method, data) {
		const iframe = document.getElementById(IFRAME_NAME);

		if(typeof method !== "string") {
			throw new Error(`Expected a string to use as message param in post message, instead received ${method}.`);
		}

		if(iframe && iframe.contentWindow) {
			iframe.contentWindow.postMessage(
				{
					method,
					...data && { data }
				},
				getSiteUrl()
			);
		} else {
			warning(`Embedded Messaging iframe not available for post message with method ${method}.`);
		}
	}

	/**
	 * If a JWT exists in first party web storage, get it.
	 * @returns {String} JWT - JWT or undefined.
	 */
	function getJwtIfExists() {
		const orgId = embeddedservice_bootstrap.settings.orgId;

		if(embeddedservice_bootstrap.isLocalStorageAvailable && localStorage.getItem(orgId)) {
			return localStorage.getItem(orgId);
		} else if(embeddedservice_bootstrap.isSessionStorageAvailable && sessionStorage.getItem(orgId)) {
			return sessionStorage.getItem(orgId);
		}

		return undefined;
	}

	/**
	 * If Failed Conversation Messages exists in first party web storage, get it.
	 * @returns {object} Failed Conversation Messages object or undefined.
	 */
	function getFailedMessagesIfExists() {
		if(embeddedservice_bootstrap.isSessionStorageAvailable && sessionStorage.getItem(FAILED_OUTBOUND_MESSAGE_ENTRIES)) {
			return JSON.parse(sessionStorage.getItem(FAILED_OUTBOUND_MESSAGE_ENTRIES));
		}

		return undefined;
	}

	/**
	 * Handles Aura site endpoint. Sets iframe.src and logs success message on iframe load.
	 * TODO W-10165756 - Remove support for aura sites & the aura app.
	 * @param iframe - iframe element
	 */
	function handleAuraSite(iframe) {
		if(!iframe) {
			error("Failed to load aura app. Iframe is undefined.");
		}

		iframe.src = getSiteUrl() + "/embeddedService/embeddedService.app";
		iframe.onload = () => {
			log("Created an iframe to load the aura application.");
		};
	}

	/**
	 * Handles LWR site endpoint. Sets iframe.src and updates FAB and iframe styling on site load.
	 * @param iframe - iframe element
	 */
	function handleLWRSite(iframe) {
		let siteUrl = getSiteUrl();

		if(!iframe) {
			error("Failed to load LWR site. Iframe is undefined.");
		}

		// Ensure a '/' is at the end of an LWR URI so a redirect doesn't occur.
		if(!siteUrl.endsWith("/")) siteUrl += "/";

		iframe.src = siteUrl + "?lwc.mode=" + (embeddedservice_bootstrap.settings.devMode ? "dev" : "prod");
		iframe.onload = () => {
			log("Created an iframe to load LWR site.");
			handleAfterAppLoad();
		};
	}

	/**
	 * On clicking the button, create an iframe with a site endpoint as experienceSiteEndpointURL along with passing necessary config values as query params.
	 */
	function handleClick() {
		let button = document.getElementById(CONVERSATION_BUTTON_CLASS);

		// eslint-disable-next-line no-negated-condition
		if(!button.classList.contains(CONVERSATION_BUTTON_LOADED_CLASS)) {
			setLoadingStatusForButton();

			try {
				// Generate markup for File Preview frame.
				embeddedservice_bootstrap.createFilePreviewFrame();
				embeddedservice_bootstrap.createIframe();
			} catch(err) {
				error(err);
			}
		} else {
			let iFrame = document.getElementById(IFRAME_NAME);

			if(iFrame) {
				// Minimize the chat if it is already maximized.
				sendPostMessageToIframeWindow(APP_MINIMIZE_EVENT_NAME);
			} else {
				error("Failed to locate the iframe/chat widget");
			}
		}
	}

	/**
	 * Handles key down events on static chat button on parent page.
	 * @param evt
	 */
	function handleKeyDown(evt) {
		if (evt && evt.key) {
			if (evt.key === " " || evt.key === "Enter") {
				evt.preventDefault();
				// SPACE or ENTER fires onclick handler for the button.
				handleClick();
			}
		}
	}

	/**
	 * If Web Storage is available, check if there's an existing session to show.
	 */
	function bootstrapIfSessionExists() {
		if(getJwtIfExists()) {
			handleClick();
		}
	}

	/**
	 * Handle updates to FAB and Iframe after app loaded event is received from container with the aura app
	 * OR after a LWR site is loaded.
	 */
	function handleAfterAppLoad() {
		let button = document.getElementById(CONVERSATION_BUTTON_CLASS);
		let iconContainer = document.getElementById(EMBEDDED_MESSAGING_ICON_CONTAINER);
		let chatIcon = document.getElementById(EMBEDDED_MESSAGING_ICON_CHAT);
		let loadingSpinner = document.getElementById("embeddedMessagingLoadingSpinner");
		let iframe = document.getElementById(IFRAME_NAME);

		if(!iframe) {
			warning("Embedded Messaging iframe not available for post-app-load updates.");
		}

		if(!button) {
			warning("Embedded Messaging static button not available for post-app-load updates.");
		} else {
			// Reset the Conversation button once the aura application is loaded in the iframe. Ifame/Chat window is rendered on top of FAB.
			iconContainer.removeChild(loadingSpinner);
			chatIcon.style.display = "block";
			button.disabled = false;
			button.classList.remove(CONVERSATION_BUTTON_LOADING_CLASS);
			button.classList.add(CONVERSATION_BUTTON_LOADED_CLASS);
			button.classList.add("no-hover");
		}
	}

	/**
	 * Handles cleanup after closing the client (once the conversation is closed). This resets the client to its initial state (State Zero).
	 */
	function handleResetClientToInitialState() {
		const iframe = document.getElementById(IFRAME_NAME);
		const button = document.getElementById(CONVERSATION_BUTTON_CLASS);
		const modal = document.getElementById(BACKGROUND_MODAL_ID);

		try {
			// Clear existing JWT created for the previous conversation.
			cleanUpJWT();
		} catch(err) {
			error("Error on clearing web storage for the previously ended conversation: " + err);
		}

		if(iframe) {
			// Remove the iframe from DOM. This should take care of clearing Conversation Entries as well.
			iframe.parentNode.removeChild(iframe);
		} else {
			throw new Error("Embedded Messaging iframe not available for resetting the client to initial state.");
		}

		if(embeddedservice_bootstrap.filePreviewFrame) {
			// Remove the file preview iframe from DOM.
			embeddedservice_bootstrap.filePreviewFrame.parentNode.removeChild(embeddedservice_bootstrap.filePreviewFrame);
		} else {
			throw new Error("Embedded Messaging file preview iframe not available for resetting the client to initial state.");
		}

		if (modal) {
			// [Mobile] Remove the background modal overlay from the DOM.
			modal.parentNode.removeChild(modal);
		}

		if (document.body.classList.contains(PREVENT_SCROLLING_CLASS)) {
			// [Mobile] Remove class that prevents background clicking and scrolling.
			// Restore document body's scroll position only for mobile devices
			document.body.classList.remove(PREVENT_SCROLLING_CLASS);
			if (embeddedservice_bootstrap.documentScrollPosition) {
				window.scrollTo(0, embeddedservice_bootstrap.documentScrollPosition);
			}
		}

		if(button) {
			button.classList.remove(CONVERSATION_BUTTON_LOADED_CLASS);
			button.classList.remove("no-hover");

			// [A11Y] Button is focusable again after container is closed.
			button.setAttribute("tabindex", 0);

			// [A11Y] Focus on static button after container is closed.
			button.focus();
		} else {
			warning("Embedded Messaging static button not available for resetting the client to initial state.");
		}
	}

	/***************************
	 Markup generation functions
	 ***************************/
	/**
	 * Create an iframe on the parent window for rendering a full size File Preview.
	 * Set the source of this iframe to an objectUrl generated by #getGeneratedPageURLForFilePreviewFrame.
	 */
	EmbeddedServiceBootstrap.prototype.createFilePreviewFrame = function createFilePreviewFrame() {
		const filePreviewFrame = document.createElement("iframe");

		filePreviewFrame.classList.add(FILE_PREVIEW_IFRAME_NAME);
		filePreviewFrame.id = FILE_PREVIEW_IFRAME_NAME;
		filePreviewFrame.name = FILE_PREVIEW_IFRAME_NAME;
		filePreviewFrame.src = getGeneratedPageURLForFilePreviewFrame();
		filePreviewFrame.title = getLabel("EmbeddedMessagingIframesAndContents", "FilePreviewIframeTitle") || FILE_PREVIEW_IFRAME_DEFAULT_TITLE;
		filePreviewFrame.onload = () => {
			log("Created an iframe for file preview.");
		};
		embeddedservice_bootstrap.filePreviewFrame = filePreviewFrame;
		document.body.appendChild(filePreviewFrame);
	};

	/**
	 * On click of conversation button,
	 * (i) Create an iframe and set source as the aura application, loaded through the experienceSiteEndpointURL.
	 * 	- Wrap iframe in 2 divs to allow scrolling/responsiveness in iframe without viewport on page header.
	 * (ii) Create a div element to be the modal overlay for mobile clients only.
	 * (iii) Append iframe and modal to the top-level container of the parent page.
	 * (iv) Hide the conversation button once iframe is loaded.
	 */
	EmbeddedServiceBootstrap.prototype.createIframe = function createIframe() {
		try {
			const parent = document.getElementById(TOP_CONTAINER_NAME);
			const iframe = document.createElement("iframe");
			const modal = createBackgroundModalOverlay();

			iframe.title = getLabel("EmbeddedMessagingIframesAndContents", "MessagingIframeTitle") || IFRAME_DEFAULT_TITLE;
			iframe.className = IFRAME_NAME;
			iframe.id = IFRAME_NAME;
			iframe.style.backgroundColor = "transparent";
			iframe.allowTransparency = "true";
			// TODO: remove allow-same-origin when Aura/LWR allows
			// Add allow-modals to throw alert for unauthenticated user losing session.
			// Add allow-popups-to-escape-sandbox to enable links to escape sandbox context.
			iframe.sandbox = "allow-scripts allow-same-origin allow-modals allow-downloads allow-popups allow-popups-to-escape-sandbox";

			// Handle Aura/LWR site endpoints separately until W-10165756 is implemented.
			if(embeddedservice_bootstrap.settings.isAuraSite) {
				handleAuraSite(iframe);
			} else {
				handleLWRSite(iframe);
			}

			// Adjust iframe distance from bottom to maximized position if browser has bottom tab bar.
			if(embeddedservice_bootstrap.settings.hasBottomTabBar) {
				iframe.classList.remove(IFRAME_BOTTOM_TAB_BAR_MINIMIZED_CLASS);
				iframe.classList.add(IFRAME_BOTTOM_TAB_BAR_MAXIMIZED_CLASS);
			}

			parent.appendChild(modal);
			parent.appendChild(iframe);
		} catch(e) {
			throw new Error(e);
		}
	};

	/**
	 * Generate markup for the static conversation button's icon.
	 * @return {HTMLElement}
	 */
	function createConversationButtonIcon() {
		const buttonIconWrapper = document.createElement("div");
		const buttonIconElement = renderSVG(DEFAULT_ICONS.CHAT);

		buttonIconElement.setAttribute("id", EMBEDDED_MESSAGING_ICON_CHAT);
		buttonIconElement.setAttribute("class", EMBEDDED_MESSAGING_ICON_CHAT);

		buttonIconWrapper.id = EMBEDDED_MESSAGING_ICON_CONTAINER;
		buttonIconWrapper.className = EMBEDDED_MESSAGING_ICON_CONTAINER;

		buttonIconWrapper.appendChild(buttonIconElement);

		return buttonIconWrapper;
	}

	/**
	 * Generate markup for the static conversation button.
	 * @return {HTMLElement}
	 */
	function createConversationButton() {
		const buttonWrapper = document.createElement("div");
		const buttonElement = document.createElement("button");
		const buttonIcon = createConversationButtonIcon();

		buttonWrapper.className = CONVERSATION_BUTTON_WRAPPER_CLASS;
		buttonElement.classList.add(CONVERSATION_BUTTON_CLASS);
		buttonElement.id = CONVERSATION_BUTTON_CLASS;
		buttonElement.href = "javascript:void(0)";

		// Click event handler for the conversation button.
		buttonElement.addEventListener("click", handleClick);
		buttonElement.addEventListener("keydown", handleKeyDown);

		// [A11Y] Button is focusable when initially loaded.
		buttonElement.setAttribute("tabindex", 0);

		// Update the color of FAB to match the color of Chat Header, i.e. --headerColor branding token from setup.
		buttonElement.style.setProperty("--eswHeaderColor", getButtonColorFromBrandingConfig());
		// Update the focus border color to match the Secondary Color, i.e. --secondaryColor branding token from setup.
		buttonElement.style.setProperty("--eswSecondaryColor", getButtonFocusBorderColorFromBrandingConfig());

		// Adjust button height if browser has bottom tab bar.
		if(embeddedservice_bootstrap.settings.hasBottomTabBar) {
			buttonElement.classList.add(CONVERSATION_BUTTON_BOTTOM_TAB_BAR_CLASS);
		}

		// Construct the static conversation button.
		buttonElement.appendChild(buttonIcon);
		buttonWrapper.appendChild(buttonElement);

		return buttonWrapper;
	}

	/**
	 * Generates markup for the background overlay (for modal view displayed on mobile only).
	 * @return {HTMLElement}
	 */
	function createBackgroundModalOverlay() {
		const modal = document.createElement("div");

		modal.id = BACKGROUND_MODAL_ID;

		return modal;
	}

	/**
	 * Generate markup for the top-level container element on the parent page.
	 * @return {HTMLElement}
	 */
	function createTopContainer() {
		const topContainerElement = document.createElement("div");

		topContainerElement.id = TOP_CONTAINER_NAME;
		topContainerElement.className = TOP_CONTAINER_NAME;

		return topContainerElement;
	}

	/**
	 * Generate markup and render on parent page.
	 */
	EmbeddedServiceBootstrap.prototype.generateMarkup = function generateMarkup() {
		const markupFragment = document.createDocumentFragment();
		const topContainer = createTopContainer();
		const conversationButton = createConversationButton();

		topContainer.appendChild(conversationButton);
		markupFragment.appendChild(topContainer);

		// Render static conversation button.
		embeddedservice_bootstrap.settings.targetElement.appendChild(markupFragment);
	};

	/**
	 * Maximize the iframe which holds the aura application. Use branding width/height if screen is
	 * big enough, else just fill what we have.
	 * @param {Object} iframe - Reference to iframe DOM element.
	 */
	EmbeddedServiceBootstrap.prototype.maximizeIframe = function maximizeIframe(frame) {
		const button = document.getElementById(CONVERSATION_BUTTON_CLASS);
		const modal = document.getElementById(BACKGROUND_MODAL_ID);

		if(frame) {
			// Adjust iframe distance from bottom to maximized position if browser has bottom tab bar.
			if(embeddedservice_bootstrap.settings.hasBottomTabBar) {
				frame.classList.remove(IFRAME_BOTTOM_TAB_BAR_MINIMIZED_CLASS);
				frame.classList.add(IFRAME_BOTTOM_TAB_BAR_MAXIMIZED_CLASS);
			}

			if(!frame.classList.contains("isMaximized")) {
				frame.classList.add("isMaximized");
			}

			if(frame.classList.contains("isMinimized")) {
				frame.classList.remove("isMinimized");
			}

			if(frame.classList.contains("isDismissed")) {
				frame.classList.remove("isDismissed");
			}
		}

		if(button) {
			// Static button is displayed under client when maximized.
			button.style.display = "block";

			// [A11Y] Button is not focusable when maximized.
			button.setAttribute("tabindex", -1);
		}

		// [Mobile] `isMaximized` controls showing the background modal. This class is constrained by media queries
		// (against the screen's max-width) in CSS, so there's no need to check isDesktop() before adding/removing the class.
		if(modal && !modal.classList.contains("isMaximized")) {
			modal.classList.add("isMaximized");
		}

		// The `embeddedMessagingPreventScrolling` class is appended/removed from the document.body
		// to prevent background scrolling on devices that display the background modal.
		// Also storing document body's scroll position so we can restore when chat gets minimized for mobile devices only
		if(!isDesktop() && !document.body.classList.contains(PREVENT_SCROLLING_CLASS)) {
			// Most browsers will have scrollElement to keep track of scroll positions
			// Some older browsers do not, so using getBoundingClientRect() for those older brosers 
			if (document.scrollingElement) {
				embeddedservice_bootstrap.documentScrollPosition = document.scrollingElement.scrollTop;
			} else {
				const docElementRect = document.documentElement.getBoundingClientRect();
				embeddedservice_bootstrap.documentScrollPosition = Math.abs(docElementRect.top);
			}
			document.body.classList.add(PREVENT_SCROLLING_CLASS);
		}

		sendPostMessageToIframeWindow(EMBEDDED_MESSAGING_MAXIMIZE_RESIZING_COMPLETED_EVENT_NAME);
	};

	/**
	 * Resize iframe to fit over button dimensions
	 */
	EmbeddedServiceBootstrap.prototype.minimizeIframe = function minimizeIframe(frame, data) {
		const button = document.getElementById(CONVERSATION_BUTTON_CLASS);
		const modal = document.getElementById(BACKGROUND_MODAL_ID);
		const isDismissed = data.isMinimizedNotificationDismissed;

		if(frame) {
			// Adjust iframe distance from bottom to minimized position if browser has bottom tab bar.
			if(embeddedservice_bootstrap.settings.hasBottomTabBar) {
				frame.classList.remove(IFRAME_BOTTOM_TAB_BAR_MAXIMIZED_CLASS);
				frame.classList.add(IFRAME_BOTTOM_TAB_BAR_MINIMIZED_CLASS);
			}

			if(frame.classList.contains("isMaximized")) {
				frame.classList.remove("isMaximized");
			}

			if(isDismissed) {
				// Resize and style iframe to render minimized button only.
				if(!frame.classList.contains("isMinimized")) {
					frame.classList.add("isMinimized");
				}

				if(!frame.classList.contains("isDismissed")) {
					frame.classList.add("isDismissed");
				}
			} else {
				// Resize and style iframe to render minimized button and notification.
				if(!frame.classList.contains("isMinimized")) {
					frame.classList.add("isMinimized");
				}
			}
		}

		if(button) {
			// Hide the default FAB when chat client is minimized so that only the minimized FAB is shown.
			button.style.display = "none";
			button.setAttribute("tabindex", -1);
		}

		// [Mobile] `isMaximized` controls showing the background modal. This class is constrained by media queries
		// (against the screen max width) in CSS, so there's no need to check isDesktop() before adding/removing the class.
		if(modal && modal.classList.contains("isMaximized")) {
			modal.classList.remove("isMaximized");
		}

		// [Mobile] The `embeddedMessagingPreventScrolling` class is appended/removed from the
		// document.body to prevent background scrolling on devices that display the background modal.
		// Also restore document body's scroll position before chat window was maximized for mobile devices only
		if(!isDesktop()) {
			document.body.classList.remove(PREVENT_SCROLLING_CLASS);
			if (embeddedservice_bootstrap.documentScrollPosition) {
				window.scrollTo(0, embeddedservice_bootstrap.documentScrollPosition);
			}
		}

		sendPostMessageToIframeWindow(EMBEDDED_MESSAGING_MINIMIZE_RESIZING_COMPLETED_EVENT_NAME);
	};

	/**
	 * Validate settings and begin the process of rendering DOM elements.
	 *
	 * @param {string} orgId - the entity ID for the organization.
	 * @param {string} eswConfigDevName - The developer name for the EmbeddedServiceConfig object.
	 * @param {string} baseCoreURL - the base URL for the core (non-experience site) instance for the org.
	 * @param {object} snippetConfig - configuration on container page. Takes preference over server-side configuration.
	 */
	EmbeddedServiceBootstrap.prototype.init = function init(orgId, eswConfigDevName, baseCoreURL, snippetConfig) {
		try {
			embeddedservice_bootstrap.settings.orgId = orgId;
			embeddedservice_bootstrap.settings.eswConfigDevName = eswConfigDevName;
			embeddedservice_bootstrap.settings.baseCoreURL = baseCoreURL;
			embeddedservice_bootstrap.settings.snippetConfig = snippetConfig;

			mergeSettings(snippetConfig || {});

			validateInitParams();

			detectWebStorageAvailability();

			checkForNativeFunctionOverrides();

			if(!embeddedservice_bootstrap.settings.targetElement) throw new Error("No targetElement specified.");

			addEventHandlers();

			// Check to see whether browser has bottom tab bar.
			embeddedservice_bootstrap.settings.hasBottomTabBar = isUseriOS15plusSafari();

			// isAuraSite - Temporary setting to fallback to Aura embeddedService.app. To be removed in W-10165756.
			embeddedservice_bootstrap.settings.isAuraSite = Boolean(embeddedservice_bootstrap.settings.isAuraSite);

			// Load CSS file for bootstrap.js from GSLB.
			const cssPromise = loadCSS().then(
				Promise.resolve.bind(Promise),
				() => {
					// Retry loading CSS file from Core, if failed to load from GSLB.
					return loadCSS(embeddedservice_bootstrap.settings.baseCoreURL);
				}
			).catch(
				() => {
					throw new Error("Error loading CSS.");
				}
			);

			// Load config settings from SCRT 2.0.
			const configPromise = getConfigurationData().then(
				response => {
					// Merge the Config Settings into embeddedservice_bootstrap.settings.
					mergeSettings(response);

					// Prepare the branding data.
					handleBrandingData(embeddedservice_bootstrap.settings.embeddedServiceConfig);

					// Merge SCRT 2.0 URL and Org Id into the Config Settings object, to be passed to the iframe.
					embeddedservice_bootstrap.settings.embeddedServiceConfig.scrt2URL = embeddedservice_bootstrap.settings.scrt2URL;
					embeddedservice_bootstrap.settings.embeddedServiceConfig.orgId = embeddedservice_bootstrap.settings.orgId;
				},
				responseStatus => {
					// Retry one more time to load config settings from SCRT 2.0 if the first attempt fails.
					return new Promise((resolve, reject) => {
						getConfigurationData().then(resolve, reject);
					});
				}
			).catch(
				() => {
					throw new Error("Unable to load Embedded Messaging configuration.");
				}
			);

			// Show button when we've loaded everything.
			Promise.all([cssPromise, configPromise]).then(() => {
				validateSettings();
				embeddedservice_bootstrap.generateMarkup();

				// Check if there's an existing session to show.
				bootstrapIfSessionExists();
			});
		} catch(err) {
			error("Error: " + err);
		}
	};

	window.embeddedservice_bootstrap = new EmbeddedServiceBootstrap();
})();
